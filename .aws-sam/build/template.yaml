AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Event-Driven S3 Upload Notifications system with Go Lambda
Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
    - dev
    - prod
  NotificationEmail:
    Type: String
    Default: devekkx@gmail.com
    Description: Email address for SNS notifications
Resources:
  UploadBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: wk8-eda-${Environment}
  NotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName:
        Fn::Sub: wk8-eda-topic-${Environment}
  EmailSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      TopicArn:
        Ref: NotificationTopic
      Endpoint:
        Ref: NotificationEmail
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: s3-sns-lambda-role-${Environment}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: LambdaAccessPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - sns:Publish
            Resource:
              Ref: SNSTopic
          - Effect: Allow
            Action:
            - s3:GetObject
            Resource:
              Fn::Sub: arn:aws:s3:::event-sns-bucket-${Environment}/*
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
  NotificationLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: bootstrap
      Runtime: provided.al2
      CodeUri: NotificationLambda
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          SNS_TOPIC_ARN:
            Ref: NotificationTopic
      Policies:
      - S3ReadPolicy:
          BucketName:
            Fn::Sub: wk8-eda-${Environment}
      - SNSPublishPolicy:
          TopicName:
            Fn::Sub: wk8-eda-topic-${Environment}
      Events:
        S3Event:
          Type: S3
          Properties:
            Bucket:
              Ref: UploadBucket
            Events: s3:ObjectCreated:*
    Metadata:
      SamResourceId: NotificationLambda
  LambdaS3Permission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: NotificationLambda
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn:
        Fn::GetAtt:
        - UploadBucket
        - Arn
Outputs:
  BucketName:
    Description: Name of the S3 bucket
    Value:
      Ref: UploadBucket
  TopicArn:
    Description: ARN of the SNS topic
    Value:
      Ref: NotificationTopic
  LambdaFunctionArn:
    Description: ARN of the Lambda function
    Value:
      Fn::GetAtt:
      - NotificationLambda
      - Arn
  LambdaExecutionRoleArn:
    Description: IAM role used by the Lambda function
    Value:
      Fn::GetAtt:
      - LambdaExecutionRole
      - Arn
